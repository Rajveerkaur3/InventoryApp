name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'lambda/**'       # Triggers Lambda updates
      - 'index.html'      # Triggers S3 updates
      - 'assets/**'       # Triggers S3 updates
      - 'css/**'          # Triggers S3 updates
      - 'js/**'           # Triggers S3 updates

jobs:
  deploy_lambda:
    name: Deploy Lambda Functions
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'lambda/') || contains(github.event.head_commit.added, 'lambda/')
    
    strategy:
      matrix:
        function:
          - get_all_inventory_items
          - get_inventory_item
          - add_inventory_item
          - delete_inventory_item
          - get_location_inventory_items

    steps:
      - uses: actions/checkout@v4
      
      - name: Debug directory structure
        run: ls -R lambda/${{ matrix.function }}

      - name: Zip Lambda Function
        run: |
          cd lambda/${{ matrix.function }}
          zip -r ../../${{ matrix.function }}.zip .
          cd ../..

      - name: Deploy to AWS Lambda
        uses: appleboy/lambda-action@master
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_session_token: ${{ secrets.AWS_SESSION_TOKEN }}
          function_name: ${{ matrix.function }}
          zip_file: ${{ matrix.function }}.zip
          region: us-east-1

  deploy_website:
    name: Deploy Website to S3
    runs-on: ubuntu-latest
    needs: deploy_lambda
    if: contains(github.event.head_commit.modified, 'index.html') || 
        contains(github.event.head_commit.modified, 'assets/') ||
        contains(github.event.head_commit.modified, 'css/') ||
        contains(github.event.head_commit.modified, 'js/')

    steps:
      - uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Upload files to S3
        run: |
          aws s3 sync . s3://inventoryapp.rrc.ca \
            --exclude "*" \
            --include "index.html" \
            --include "assets/*" \
            --include "css/*" \
            --include "js/*" \
            --acl public-read

      - name: Invalidate CloudFront cache
        if: always()
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"
